import httpx
import io
from fastapi import FastAPI, UploadFile, File, HTTPException
from typing import List
import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import librosa
import matplotlib.pyplot as plt
import csv
import os

os.environ["TF_ENABLE_ONEDNN_OPTS"] = "0"

app = FastAPI()
# üîä Carregar YAMNet
yamnet_model = hub.load("https://tfhub.dev/google/yamnet/1")

# üìÑ Baixar labels
# labels_url = "https://raw.githubusercontent.com/tensorflow/models/master/research/audioset/yamnet/yamnet_class_map.csv"
# label_path = tf.keras.utils.get_file("yamnet_class_map.csv", labels_url)

# with open(label_path) as f:
#     reader = csv.reader(f)
#     next(reader)
#     class_names = [row[2] for row in reader]

traducao = [
    'Fala de crian√ßa, crian√ßa falando', 'Conversa', 'Narra√ß√£o, mon√≥logo', 'Balbucio', 'Sintetizador de voz', 
    'Grito', 'Rugido', 'Grito agudo', 'Berro', 'Crian√ßas gritando', 'Grito alto', 'Sussurro', 'Risada', 
    'Riso de beb√™', 'Gargalhada', 'Risadinha', 'Gargalhada alta', 'Riso contido', 'Choro, solu√ßo', 
    'Choro de beb√™', 'Choramingar', 'Lamento, gemido', 'Suspiro', 'Canto', 'Coral', 'Iodel', 
    'Canto ritual', 'Mantra', 'Crian√ßa cantando', 'Canto sint√©tico', 'Rap', 'Zumbido', 'Gemido', 
    'Grunhido', 'Assobio', 'Respira√ß√£o', 'Chiado', 'Ronco', 'Suspiro ofegante', 'Ofegar', 'Fungar', 
    'Tosse', 'Limpar a garganta', 'Espirro', 'Fungar', 'Correr', 'Arrastar os p√©s', 'Caminhar, passos', 
    'Mastiga√ß√£o', 'Mordida', 'Gargarejo', 'Ronco de est√¥mago', 'Arroto', 'Solu√ßo', 'Flatul√™ncia', 
    'M√£os', 'Estalar de dedos', 'Palmas', 'Batimentos card√≠acos', 'Sopro card√≠aco', 'Aplausos', 
    'Palmas', 'Conversa animada', 'Multid√£o', 'Barulho de fundo, murm√∫rio', 'Crian√ßas brincando', 
    'Animal', 'Animais dom√©sticos', 'C√£o', 'Latido', 'Latido agudo', 'Uivo', 'Latido (onomatopeia)', 
    'Rosnar', 'Choramingar (c√£o)', 'Gato', 'Ronronar', 'Miar', 'Sibilo', 'Miado alto', 
    'Animais de fazenda', 'Cavalo', 'Tropear', 'Relinchar', 'Gado', 'Mugir', 'Sino de vaca', 
    'Porco', 'Oinc', 'Cabra', 'Bale', 'Ovelha', 'Aves dom√©sticas', 'Galinha, galo', 'Cacarejo', 
    'Cantar do galo', 'Peru', 'Gorgolejo', 'Pato', 'Grasnar', 'Ganso', 'Grasnar', 'Animais selvagens', 
    'Felinos rugindo', 'Rugido', 'P√°ssaro', 'Canto de p√°ssaro', 'Piar', 'Grasnar', 'Pombo, rolinha', 
    'Arrulhar', 'Corvo', 'Grasnar', 'Coruja', 'Piar', 'Bater de asas', 'Can√≠deos', 'Roedores', 
    'Rato', 'Passos leves', 'Inseto', 'Grilo', 'Mosquito', 'Mosca', 'Zumbido', 'Abelha, vespa', 
    'Sapo', 'Coaxar', 'Cobra', 'Chocalhar', 'Canto de baleia', 'M√∫sica', 'Instrumento musical', 
    'Instrumento de cordas dedilhadas', 'Viol√£o', 'Guitarra el√©trica', 'Baixo', 'Viol√£o ac√∫stico', 
    'Guitarra slide', 'Tapping', 'Dedilhar', 'Banjo', 'Sitar', 'Bandolim', 'C√≠tara', 'Ukulele', 
    'Teclado', 'Piano', 'Piano el√©trico', '√ìrg√£o', '√ìrg√£o eletr√¥nico', '√ìrg√£o Hammond', 
    'Sintetizador', 'Sampler', 'Cravo', 'Percuss√£o', 'Bateria', 'Caixa de ritmos', 'Tambor', 
    'Caixa', 'Rimshot', 'Rufar', 'Bumbo', 'T√≠mpano', 'Tabla', 'Prato', 'Chimbal', 'Bloco de madeira', 
    'Pandeiro', 'Chocalho', 'Maraca', 'Gongo', 'Sinos tubulares', 'Percuss√£o de baquetas', 
    'Marimba, xilofone', 'Glockenspiel', 'Vibrafone', 'Pan de a√ßo', 'Orquestra', 'Metais', 
    'Trompa', 'Trompete', 'Trombone', 'Cordas friccionadas', 'Se√ß√£o de cordas', 'Violino', 
    'Pizzicato', 'Violoncelo', 'Contrabaixo', 'Instrumentos de sopro', 'Flauta', 'Saxofone', 
    'Clarinete', 'Harpa', 'Sino', 'Sino de igreja', 'Sino de natal', 'Sino de bicicleta', 
    'Diapas√£o', 'Carilh√£o', 'Sino de vento', 'Repique de sinos', 'Gaita', 'Sanfona', 'Gaita de foles', 
    'Didgeridoo', 'Shofar', 'Theremin', 'Tigela cantante', 'Scratching', 'M√∫sica pop', 'Hip hop', 
    'Beatbox', 'Rock', 'Heavy metal', 'Punk rock', 'Grunge', 'Rock progressivo', 'Rock and roll', 
    'Rock psicod√©lico', 'Rhythm and blues', 'Soul', 'Reggae', 'M√∫sica country', 'Swing', 
    'Bluegrass', 'Funk', 'M√∫sica folcl√≥rica', 'M√∫sica do Oriente M√©dio', 'Jazz', 'Disco', 
    'M√∫sica cl√°ssica', '√ìpera', 'M√∫sica eletr√¥nica', 'House', 'Techno', 'Dubstep', 'Drum and bass', 
    'Eletr√¥nica', 'M√∫sica eletr√¥nica dan√ßante', 'M√∫sica ambiente', 'Trance', 'M√∫sica latina', 
    'Salsa', 'Flamenco', 'Blues', 'M√∫sica infantil', 'New age', 'M√∫sica vocal', 'A capella', 
    'M√∫sica africana', 'Afrobeat', 'M√∫sica crist√£', 'Gospel', 'M√∫sica asi√°tica', 'M√∫sica carn√°tica', 
    'M√∫sica de Bollywood', 'Ska', 'M√∫sica tradicional', 'M√∫sica independente', 'Can√ß√£o', 
    'M√∫sica de fundo', 'M√∫sica tema', 'Jingle', 'Trilha sonora', 'Can√ß√£o de ninar', 
    'M√∫sica de videogame', 'M√∫sica natalina', 'M√∫sica dan√ßante', 'M√∫sica de casamento', 
    'M√∫sica alegre', 'M√∫sica triste', 'M√∫sica suave', 'M√∫sica animada', 'M√∫sica irritada', 
    'M√∫sica assustadora', 'Vento', 'Farfalhar de folhas', 'Ru√≠do de vento (microfone)', 
    'Tempestade', 'Trov√£o', '√Ågua', 'Chuva', 'Gota de chuva', 'Chuva na superf√≠cie', 'Riacho', 
    'Cachoeira', 'Oceano', 'Ondas', 'Vapor', 'Borbulhar', 'Fogo', 'Estalar', 'Ve√≠culo', 
    'Barco', 'Veleiro', 'Canoa', 'Lancha', 'Navio', 'Ve√≠culo motorizado', 'Carro', 'Buzina', 
    'Tut', 'Alarme de carro', 'Vidro el√©trico', 'Derrapagem', 'Pneu cantando', 'Carro passando', 
    'Carro de corrida', 'Caminh√£o', 'Freio a ar', 'Buzina de caminh√£o', 'Bipe de r√©', 
    'Carro de sorvete', '√înibus', 'Ve√≠culo de emerg√™ncia', 'Carro de pol√≠cia', 'Ambul√¢ncia', 
    'Caminh√£o de bombeiros', 'Moto', 'Ru√≠do de tr√¢nsito', 'Transporte ferrovi√°rio', 'Trem', 
    'Apito de trem', 'Buzina de trem', 'Vag√£o', 'Ranger de trem', 'Metr√¥', 'Aeronave', 
    'Motor de avi√£o', 'Motor a jato', 'H√©lice', 'Helic√≥ptero', 'Avi√£o', 'Bicicleta', 'Skate', 
    'Motor', 'Motor pequeno', 'Motor de dentista', 'Cortador de grama', 'Motosserra', 
    'Motor m√©dio', 'Motor grande', 'Batida de motor', 'Motor ligando', 'Marcha lenta', 
    'Acelerar', 'Porta', 'Campainha', 'Ding-dong', 'Porta deslizante', 'Porta batendo', 
    'Bater na porta', 'Bater levemente', 'Ranger', 'Abrir/fechar arm√°rio', 'Abrir/fechar gaveta', 
    'Pratos, panelas', 'Talheres', 'Cortar comida', 'Fritar', 'Micro-ondas', 'Liquidificador', 
    'Torneira', 'Encher pia', 'Encher banheira', 'Secador de cabelo', 'Descarga', 'Escova de dente', 
    'Escova el√©trica', 'Aspirador', 'Z√≠per', 'Chaveiro', 'Moeda caindo', 'Tesoura', 'Barbeador', 
    'Embaralhar cartas', 'Digita√ß√£o', 'M√°quina de escrever', 'Teclado', 'Escrever', 'Alarme', 
    'Telefone', 'Telefone tocando', 'Toque', 'Discagem', 'Tom de discagem', 'Ocupado', 
    'Despertador', 'Sirene', 'Sirene de alerta', 'Buzina', 'Detector de fuma√ßa', 'Alarme de inc√™ndio', 
    'Sirene de nevoeiro', 'Apito', 'Apito de vapor', 'Mecanismos', 'Catraca', 'Rel√≥gio', 
    'Tique', 'Tique-taque', 'Engrenagens', 'Polias', 'M√°quina de costura', 'Ventilador', 
    'Ar-condicionado', 'Caixa registradora', 'Impressora', 'C√¢mera', 'C√¢mera DSLR', 'Ferramentas', 
    'Martelo', 'Britadeira', 'Serra', 'Lixa', 'Lixar', 'Ferramenta el√©trica', 'Furadeira', 
    'Explos√£o', 'Tiro', 'Metralhadora', 'Rajada', 'Artilharia', 'Arma de brinquedo', 
    'Fogos de artif√≠cio', 'Foguete', 'Estouro', 'Erup√ß√£o', 'Estrondo', 'Madeira', 'Talhar', 
    'Estilha√ßo', 'Rachadura', 'Vidro', 'Tinir', 'Estilha√ßar', 'L√≠quido', 'Respingar', 
    'Agitar', 'Esmagar', 'Pingar', 'Despejar', 'Gotejar', 'Jorrar', 'Encher', 'Spray', 
    'Bomba', 'Mexer', 'Ferver', 'Sonar', 'Flecha', 'Zunir', 'Baque', 'Tum', 'Sintonizador', 
    'Pedal de efeito', 'Efeito chorus', 'Quicar bola', 'Explodir', 'Tapa', 'Golpe', 'Esmagar', 
    'Quebrar', 'Quicar', 'Chicotear', 'Bater asa', 'Arranhar', 'Raspar', 'Esfregar', 'Rolar', 
    'Esmagar', 'Amassar', 'Rasgar', 'Bip', 'Ping', 'Tinido', 'Clang', 'Guincho', 'Ranger', 
    'Farfalhar', 'Zumbido', 'Barulho', 'Chiado', 'Clicar', 'Click-clack', 'Estrondo', 
    'Pluft', 'Tinir', 'Zumbido', 'Zunir', 'Boing', 'Triturar', 'Sil√™ncio', 'Onda senoidal', 
    'Harm√¥nico', 'Tom de chirp', 'Efeito sonoro', 'Pulso', 'Ambiente interno pequeno', 
    'Ambiente interno grande', 'Espa√ßo p√∫blico', 'Externo urbano', 'Externo rural', 
    'Reverbera√ß√£o', 'Eco', 'Ru√≠do', 'Ru√≠do ambiental', 'Ru√≠do est√°tico', 'Zumbido el√©trico', 
    'Distor√ß√£o', 'Sidetone', 'Cacofonia', 'Ru√≠do branco', 'Ru√≠do rosa', 'Latejar', 'Vibra√ß√£o', 
    'Televis√£o', 'R√°dio', 'Grava√ß√£o de campo'
]


@app.post("/")
async def is_talk(files: List[UploadFile] = File(...)):
    if not files:
        return {"error": "Nenhum arquivo enviado."}

    audio = files[0]
    audio_bytes = await audio.read()
    audio_buffer = io.BytesIO(audio_bytes)

    print(audio)
    try:
        waveform, sr = librosa.load(audio_buffer, sr=16000)
    except Exception as e:
        return {"error": f"Erro ao carregar √°udio: {str(e)}"}
    
    scores, embeddings, spectrogram = yamnet_model(waveform)

    mean_scores = tf.reduce_mean(scores, axis=0)
    top_class = tf.argmax(mean_scores)
    top_score = mean_scores[top_class].numpy()
    top_label = traducao[top_class]

    print(f"\nüîç Detec√ß√£o: {top_label}")
    print(f"üìà Confian√ßa: {top_score:.2f}")

    # VER GRAFICO DO AUDIO
    # plt.figure(figsize=(10, 4))
    # plt.plot(waveform)
    # plt.title(f"√Åudio: {audio.filename}")
    # plt.xlabel("Amostras")
    # plt.ylabel("Amplitude")
    # plt.show()

    # üß† Verificar se √© voz/fala/canto e transcrever
    speech_related = [
    "Fala", 
    "Fala de crian√ßa, crian√ßa falando", 
    "Conversa", 
    "Narra√ß√£o, mon√≥logo",
    "Balbucio", 
    "Sintetizador de voz", 
    "Conversa animada", 
    "Barulho de fundo, murm√∫rio",
    "Canto", 
    "Crian√ßa cantando", 
    "Canto sint√©tico",
    "Rap", 
    "Sussurro"
    ]

    if top_label in speech_related:
        print("\nüó£Ô∏è Detec√ß√£o √© de fala/canto, chamando a api de transcri√ß√£o...")
        async with httpx.AsyncClient() as client:
            res = await client.post('https://transcription.zafiras.com.br/transcribe',
            files={'files': (audio.filename, io.BytesIO(audio_bytes), audio.content_type)},
            timeout=30.0
        )
            
        data = res.json()["results"][0]
        print(data)
        return {
            "categoria": top_label,
            "message": data["transcript"],  
            "filename": data["filename"]   
        }
    else:
        return {
            "categoria": top_label,
            "error": "üîá √Åudio n√£o classificado como fala, n√£o ser√° transcrito.",
            }